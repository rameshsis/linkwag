<?php/* * To change this template, choose Tools | Templates * and open the template in the editor. */add_action('wp_ajax_ajax', 'grv_callbacks'); function img_src($img){    return PURL . '/img/' . $img;}function grv_get_post_types(){        $types = get_post_types();    unset($types['attachment']);    unset($types['revision']);    unset($types['nav_menu_item']);        return $types;}function grv_type_posts($type){    global $wpdb;     $result = $wpdb->get_results( "select * from $wpdb->posts where post_type='$type' AND post_status='publish'" );    return $result;}function post_is_wagged($post_id){    $key = 'linkwag'.$post_id;		if( get_post_meta($post_id,$key,true) == ''){		 update_post_meta($post_id,$key,1);		 return 1;	}	    return get_post_meta($post_id, $key,true);}function wag_post($post_id,$state){    $key = 'linkwag'.$post_id;	//echo 'hello';	//die();    update_post_meta($post_id,$key,$state);    if($state){        grv_save_post($post_id);	}    else{        grv_remove_post($post_id);    }}function grv_remove_post($id){       $postData = array('action'=>'del','id'=>$id,'domain'=>URL);    $post = curl_init();	curl_setopt($post, CURLOPT_URL,API);	curl_setopt($post, CURLOPT_POST, true);	curl_setopt($post, CURLOPT_POSTFIELDS, $postData);	curl_setopt($post, CURLOPT_RETURNTRANSFER, true);	curl_setopt($post, CURLOPT_HEADER, 1);      $result = curl_exec($post);    curl_close($post);    //$result; exit;	return $result;}function grv_save_post($id){	//echo 'id'.$id;     $wpPost = get_post($id);  //print_r($wpPost);  $feat_image = wp_get_attachment_url( get_post_thumbnail_id($wpPost->ID) );//echo $feat_image;  //die();  	$list = array();    $list = get_plugins_list(  $format, $show_inactive, $cache, $nofollow, $target );    if($wpPost->post_status != 'publish') return;    if(get_option('icon_post') == '1'){		$s = '<img src="' . plugins_url( 'img/logo.jpg' , dirname(__FILE__) ) . '" > ';	}    else {		$s ='';	}	if($wpPost->post_status=='publish'){	$status=1;		}	elseif($wpPost->post_status=='draft'){	$status=2;	}	elseif($wpPost->post_status=='trash'){	$status=3;	}            if (!$excerpt = trim($wpPost->post_excerpt)) {		                $excerpt = $wpPost->post_content;                $excerpt = strip_shortcodes( $excerpt );                $excerpt = apply_filters('the_content', $excerpt);                $excerpt = str_replace(']]>', ']]>', $excerpt);                $excerpt = strip_tags($excerpt);                $excerpt_length = apply_filters('excerpt_length', 55);                $excerpt_more = apply_filters('excerpt_more', ' ' . '[...]');                $words = preg_split("/[\n\r\t ]+/", $excerpt, $excerpt_length + 1, PREG_SPLIT_NO_EMPTY);                if ( count($words) > $excerpt_length ) {                    array_pop($words);                    $excerpt = implode(' ', $words);                    $excerpt = $excerpt . $excerpt_more;                } else {                    $excerpt = implode(' ', $words);                }            }            $post = $old_post;		$excerpt1 = mb_convert_encoding($excerpt, "HTML-ENTITIES", 'UTF-8');			  $output = preg_match_all('/<img.+src=[\'"]([^\'"]+)[\'"].*>/i', $wpPost->post_content, $matches);  echo '<pre>';  //print_r($matches);  echo '</pre>';  $first_img = $matches[1][0];echo 'first'.$catch_image = $first_img;	preg_match_all('/<a (.*)><img.+?src=(\'|")(.+?)(\'|")[^>]*><(.*\/)*a>/', $wpPost->post_content , $matchesnew);$checkid = 1;foreach($matchesnew[1] as $keysc){$finalvalue = str_replace('href="', '', $keysc);	$finalvalue1 = substr($finalvalue, 0, strlen($finalvalue)-1);	if(strpos($finalvalue1,URL) !== false)	{	$urlhreftrue = $finalvalue1.'&&&'.$checkid;	Break;		}else	{		$checkid ++;	}	}	//echo $urlhreftrue;$newurl = explode('&&&',$urlhreftrue);$newurl[1];$checkid1 = 1;foreach($matchesnew[3] as $keyimg){		if($keyimg == $catch_image)	{		  echo $checkvalue = '1';	}	if($checkvalue == '1')	{		if( $checkid1 == $newurl[1] )		{			$image = $keyimg; 		}	}	else	{			$image = $catch_image;	}$checkid1 ++;}					    $postData = array(        'action'    => 'save',        'id'        => urlencode($id),        'title'     => urlencode($wpPost->post_title),        'content'   => urlencode($wpPost->post_content),		'posttype'   => urlencode($wpPost->post_type),        'excerpt'   => urlencode($excerpt1),        'slug'      => urlencode($wpPost->post_name),        'link'      => get_permalink($id),        'thumb'     => wp_get_attachment_url( get_post_thumbnail_id($id),'full'),        'created'   => $wpPost->post_date,        'category'  => serialize(grv_get_post_categories($id)),        'tags'      => serialize(grv_get_post_tags($id)),        'comments'  => serialize(grv_get_post_comments($id)),        'status'    => $status,        'domain'    =>URL,		'plugins_list' => $list,		'linkwag_email' => get_option('linkwag_email'),		'unique_id' => get_option('linkwag_unique'),		'comment_count' =>count_comments($id),		'look_number' =>'0',		'rght' =>'0',		'lft' =>'0',		'quacks'=>'0',		'sort_order' =>'0',		'parent_id'=>'0',		'feature_image'	 => $feat_image,		'image1' => $image				    );		        $post = curl_init();        curl_setopt($post, CURLOPT_URL,API);        curl_setopt($post, CURLOPT_POST, true);        curl_setopt($post, CURLOPT_POSTFIELDS, $postData);        curl_setopt($post, CURLOPT_RETURNTRANSFER, true);		curl_setopt($post, CURLOPT_HEADER, 1);          $result = curl_exec($post);		//print_r($result);		        curl_close($post);      //echo $result; 	  //exit;		return $result;	   	}function grv_get_post_categories($post_id){    $post_categories = wp_get_post_categories( $post_id );    $cats = array();    foreach($post_categories as $c){            $cat = get_category( $c );            $cats[] = array( 'name' => $cat->name, 'slug' => $cat->slug,'description'=>$cat->description);    }    return $cats;}function grv_get_post_tags($id){    $tags = wp_get_post_tags($id);    $tag = array();    foreach($tags as $item){        $tag[]= array( 'name' => $item->name, 'slug' => $item->slug );                    }    return $tag;}function grv_get_post_comments($id){        $comments  = get_comments(array('post_id' => $id,'status' => 'approve'));    $data = array();    foreach($comments as $comment){        $data  = array('author'=>$comment->comment_author,'content'=>$comment->comment_content);    }    return $data;}function count_comments($id){	$number = wp_count_comments($id); 	 $total_comment = $number->approved; 	return $total_comment;}function grv_callbacks(){         extract($_POST);    switch($fb){        case 'wag_post':             wag_post($id,$state);            break;        default:            break;    }}add_action( 'plugins_loaded', plugin_update ); function plugin_update() {	ob_start();	$list1 = displayPluginsAsList();	$insp1 = implode(',',$list1);	$postData = array(        'action'    => 'save_plugin',        'domain'    =>URL,		'plugins_list' => $insp1,		'linkwag_email' => get_option('linkwag_email')		     );        $post = curl_init();        curl_setopt($post, CURLOPT_URL,API);        curl_setopt($post, CURLOPT_POST, true);        curl_setopt($post, CURLOPT_POSTFIELDS, $postData);        curl_setopt($post, CURLOPT_RETURNTRANSFER, true);		curl_setopt($post, CURLOPT_HEADER, 1);          $result = curl_exec($post);		//print_r($result);        curl_close($post);        // $result;//		 exit;		return $result;}function get_plugins_list( $format = '', $show_inactive = false, $cache = 1, $nofollow = false, $target = '' ) {define( 'APL_DEFAULT_PLUGIN_FORMAT', '<li>#LinkedTitle# by #LinkedAuthor#.</li>' );	if ( '' == $format ) { $format = APL_DEFAULT_PLUGIN_FORMAT; }	if ( $nofollow ) { $nofollow = ' rel="nofollow"'; } else { $nofollow = ''; }	if ( '' != $target ) { $target = ' target="' . $target . '"'; } else { $target = ''; }	$plugins = apl_get_plugin_data( $cache );	$output = '';	foreach( $plugins as $plugin_file => $plugin_data ) {		if ( $show_inactive || is_plugin_active( $plugin_file ) )  {			$output .= format_plugin_list( $plugin_data, $format, $nofollow, $target );		}	}	return "\n<!-- Plugins List v" . plugins_list_version . " -->\n" . $output . "\n<!-- End of YouTube Embed code -->\n";}function apl_get_plugin_data( $cache ) {	if ( !$cache ) { $cache = 'no'; }	$plugins = false;	$cache_key = 'plugins_list';	if ( is_numeric( $cache ) ) { $plugins = get_transient( $cache_key ); }	if ( !$plugins ) {		$plugins = get_plugins();		if ( ( '' != $plugins ) && ( is_numeric( $cache ) ) ) { set_transient( $cache_key, $plugins, 3600 * $cache ); }	}	return $plugins;}function format_plugin_list( $plugin_data, $format, $nofollow, $target ) {	$plugins_allowedtags1 = array( 'a' => array( 'href' => array(), 'title' => array() ), 'abbr' => array( 'title' => array() ), 'acronym' => array( 'title' => array() ), 'code' => array(), 'em' => array(), 'strong' => array() );	$plugins_allowedtags2 = array( 'abbr' => array( 'title' => array() ), 'acronym' => array( 'title' => array() ), 'code' => array(), 'em' => array(), 'strong' => array() );	$plugin_data[ 'Title' ] = wp_kses( $plugin_data[ 'Title' ], $plugins_allowedtags1 );	$plugin_data[ 'PluginURI' ] = wp_kses( $plugin_data[ 'PluginURI' ], $plugins_allowedtags1 );	$plugin_data[ 'AuthorURI' ] = wp_kses( $plugin_data[ 'AuthorURI' ], $plugins_allowedtags1 );	$plugin_data[ 'Version' ] = wp_kses( $plugin_data[ 'Version' ], $plugins_allowedtags1 );	$plugin_data[ 'Author' ] = wp_kses( $plugin_data[ 'Author' ], $plugins_allowedtags1 );	$format = replace_tags( $plugin_data, $format, $nofollow, $target );	return $format;}function replace_tags( $plugin_data, $format, $nofollow, $target ) {	$format = str_replace( '#Title#', $plugin_data[ 'Title' ], $format );	$format = str_replace( '#PluginURI#', $plugin_data[ 'PluginURI' ], $format );	$format = str_replace( '#AuthorURI#', $plugin_data[ 'AuthorURI' ], $format );	$format = str_replace( '#Version#', $plugin_data[ 'Version' ], $format );	$format = str_replace( '#Description#', $plugin_data[ 'Description' ], $format );	$format = str_replace( '#Author#', $plugin_data[ 'Author' ], $format );	$format = str_replace( '#LinkedTitle#', "<a href='" . $plugin_data[ 'PluginURI' ] . "' title='" . $plugin_data[ 'Title' ] . "'" . $nofollow . $target . ">" . $plugin_data[ 'Title' ] . "</a>", $format );	$format = str_replace( '#LinkedAuthor#', "<a href='" . $plugin_data[ 'AuthorURI' ] . "' title='" . $plugin_data[ 'Author' ] . "'" . $nofollow . $target . ">" . $plugin_data[ 'Author' ] . "</a>", $format );	return $format;}global $myPluginFiles;$activePluginsResult = get_settings('active_plugins');if (is_array($activePluginsResult)) {	$pup_plugin_files = $activePluginsResult;} else {	$pup_plugin_files = explode("\n",$activePluginsResult);}$myPluginFiles = array_values($pup_plugin_files);if (is_array($myPluginFiles[0])) {	// new style - used the keys, not the values	$myPluginFiles = array_keys($pup_plugin_files);}sort($myPluginFiles); // Alphabetize by filename. Better way?$myPluginFiles=array_unique($myPluginFiles);function pups_getPluginData($plugin_file) {	if (trim($plugin_file) == "") return '';	if (!file_exists(ABSPATH . '/wp-content/plugins/' .$plugin_file)) return '';	if (!is_readable(ABSPATH . '/wp-content/plugins/' .$plugin_file)) return '';	$plugin_data = implode('', file(ABSPATH .'/wp-content/plugins/' . $plugin_file));	preg_match("|Plugin Name:(.*)|i", $plugin_data,$plugin_name);	if ('' == $plugin_name[1]) return '';	preg_match("|Plugin URI:(.*)|i", $plugin_data, $plugin_uri);	preg_match("|Description:(.*)|i", $plugin_data,$description);	preg_match("|Author:(.*)|i", $plugin_data, $author_name);	preg_match("|Author URI:(.*)|i", $plugin_data, $author_uri);	if ( preg_match("|Version:(.*)|i", $plugin_data, $version) )		$version = $version[1];	else		$version ='';	$description = wptexturize($description[1]);	$description = wp_kses($description, array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array()) );	if ('' == $plugin_uri) {		$plugin = $plugin_name[1];	} else {		$plugin = __("<a href='".trim($plugin_uri[1])."' title='Visit plugin homepage'>{$plugin_name[1]}</a>");	}	if ('' == $author_uri) {		$author = $author_name[1];	} else {		$author = __("<a href='".trim($author_uri[1])."' title='Visit author homepage'>{$author_name[1]}</a>");	}	return array('plugin_name' => trim($plugin_name[1]), 'plugin_uri' => $plugin_uri[1], 'description' => $description, 'author_name' => $author_name[1], 'author_uri' => $author_uri[1], 'version' => $version, 'plugin' => $plugin, 'author' => $author );}function pups_sortPlugins($plug1, $plug2) {if(isset($plug1['plugin_name']) || isset($plug2['plugin_name']))	{		return strnatcasecmp($plug1['plugin_name'], $plug2['plugin_name']);	}}        function pups_getPlugins() {	global $myPluginFiles;	$result = array();        foreach($myPluginFiles as $plugin_file) {		$current = pups_getPluginData($plugin_file);		if ('' != $current)			$result[$current['plugin_name']] = $current;	}        uksort($result, 'pups_sortPlugins');	$myPluginFiles = $result;	return $myPluginFiles;}$myPluginFiles = pups_getPlugins();function displayPluginsAsTable($tableId="none", $showDescription="1") {	global $myPluginFiles;	$style = '';	if ($tableId == "none") {		$tableStr = ' width="100%" cellpadding="3" cellspacing="3" ';	} else {		$tableStr = ' id="'.$tableId.'" ';	}?><table <?php print $tableStr; ?> >        <tr>                <th><?php _e('Plugin'); ?></th>                <th><?php _e('Version'); ?></th>                <th><?php _e('Author'); ?></th>		<?php if ($showDescription == "1") { ?>                <th><?php _e('Description'); ?></th>		<?php }; ?>        </tr>		<?php        $style = '';        foreach($myPluginFiles as $plugin_file) {                $style = ('class="alternate"' == $style) ? '' :'class="alternate"';		$plugin = $plugin_file['plugin'];		$plugin_name = $plugin_file['plugin_name'];		$plugin_uri = $plugin_file['plugin_uri'];		$author = $plugin_file['author'];		$author_name = $plugin_file['author_name'];		$author_uri = $plugin_file['author_uri'];		$version = $plugin_file['version'];		$description = $plugin_file['description'];                echo "        <tr $style>                <td>$plugin<!--\n";print "Plugin Name: ".$plugin_name."\n";print "Plugin URI: ".$plugin_uri."\n";print "Author: ".$author_name."\n";print "Description: ".htmlspecialchars($description)."\n";print "Author URI: ".$author_uri."\n";print "Version: ".$version."\n";                echo "-->	</td>                <td>$version</td>                <td>$author</td>		";		if($showDescription) {		echo "                <td>$description</td>		";		};	echo "        </tr>	";	}?></table><?php};function displayPluginsAsList() { 	global $myPluginFiles;$pluginresult1 =array();	foreach($myPluginFiles as $plugin_file) {		$plugin = $plugin_file['plugin'];				$pluginresult = "	<li> ".$plugin." </li>";	$pluginresult1[] = $pluginresult;								}					return($pluginresult1);}// end of that function?>